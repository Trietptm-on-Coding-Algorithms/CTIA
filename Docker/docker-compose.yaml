version: "2"
  services:
#portainer
#cortex
    cortex:
      image: thehiveproject/cortex:latest
      depends_on:
        - elasticsearch
      ports:
        - "0.0.0.0:9001:9001"
    elasticsearch:
      image: docker.elastic.co/elasticsearch/elasticsearch:5.6.0
      environment:
        - http.host=0.0.0.0
        - transport.host=0.0.0.0
        - xpack.security.enabled=false
        - cluster.name=hive
        - script.inline=true
        - thread_pool.index.queue_size=100000
        - thread_pool.search.queue_size=100000
        - thread_pool.bulk.queue_size=100000    
#misp
    misp:
      build: ./misp
      image: misp:latest
      restart: unless-stopped
      ports:
        - "8010:80"
      volumes:
        - /dev/urandom:/dev/urandom
        - ./gpg/:/var/www/MISP/.gnupg
      environment:
        - MISP_BASEURL=http://localhost/
        - REDIS_HOST=redis
        - MYSQL_HOST=db
        - MYSQL_DATABASE=misp
        - MYSQL_USER=misp
        - MYSQL_PASSWORD=misp
        - POSTFIX_RELAY_HOST=relay.fqdn
        - TIMEZONE=Europe/Brussels
    redis:
      image: redis
      restart: unless-stopped
    db:
      image: mysql/mysql-server:5.7
      restart: unless-stopped
      volumes:
        - ./data/db:/var/lib/mysql
      environment:
        - MYSQL_DATABASE=misp
        - MYSQL_USER=misp
        - MYSQL_PASSWORD=misp
        - MYSQL_ROOT_PASSWORD=misp
#mattermost
    db:
      build: ./mattermost/db
      read_only: true
      restart: unless-stopped
      volumes:
        - ./volumes/db/var/lib/postgresql/data:/var/lib/postgresql/data
        - /etc/localtime:/etc/localtime:ro
      environment:
        - POSTGRES_USER=mmuser
        - POSTGRES_PASSWORD=mmuser_password
        - POSTGRES_DB=mattermost
      # uncomment the following to enable backup
      #  - AWS_ACCESS_KEY_ID=XXXX
      #  - AWS_SECRET_ACCESS_KEY=XXXX
      #  - WALE_S3_PREFIX=s3://BUCKET_NAME/PATH
      #  - AWS_REGION=us-east-1
    app:
      build:
        context: ./mattermost/app
        # uncomment following lines for team edition or change UID/GID
        # args:
        #   - edition=team
        #   - PUID=1000
        #   - PGID=1000
      restart: unless-stopped
      volumes:
        - ./volumes/app/mattermost/config:/mattermost/config:rw
        - ./volumes/app/mattermost/data:/mattermost/data:rw
        - ./volumes/app/mattermost/logs:/mattermost/logs:rw
        - ./volumes/app/mattermost/plugins:/mattermost/plugins:rw
        - ./volumes/app/mattermost/client-plugins:/mattermost/client/plugins:rw
        - /etc/localtime:/etc/localtime:ro
      environment:
        # set same as db credentials and dbname
        - MM_USERNAME=mmuser
        - MM_PASSWORD=mmuser_password
        - MM_DBNAME=mattermost
        # in case your config is not in default location
        #- MM_CONFIG=/mattermost/config/config.json
    web:
      build: ./mattermost/web
      ports:
        - "8020:80"
        - "4432:443"
      read_only: true
      restart: unless-stopped
      volumes:
        # This directory must have cert files if you want to enable SSL
        - ./volumes/web/cert:/cert:ro
        - /etc/localtime:/etc/localtime:ro
      # Uncomment for SSL
      # environment:
      #  - MATTERMOST_ENABLE_SSL=true
#openvpn
#ejabberd
    ejabberd:
      image: rroemhild/ejabberd
      ports:
        - 5222:5222
        - 5269:5269
        - 5280:5280
      environment:
        - ERLANG_NODE=ejabberd
        - XMPP_DOMAIN=example.com xyz.io
        - EJABBERD_ADMINS=admin@example.com
        - EJABBERD_USERS=admin@example.com:password4321 user1@xyz.io
#kali
#maltego-trx
#taxii
#cuckoo
#cuckoo
    cuckoo:
      image: blacktop/cuckoo:2.0
      command: daemon
      ports:
        - "2042:2042"
      volumes:
        - ./cuckoo-tmp/:/tmp/cuckoo-tmp/
        - ./storage/:/cuckoo/storage/
      networks:
        - cuckoo
      env_file:
        - ./2.0/config-file.env
    web:
      image: blacktop/cuckoo:2.0
      ports:
        - "8030:31337"
      links:
        - mongo
        - elasticsearch
        - postgres
      command: web
      volumes:
        - ./cuckoo-tmp/:/tmp/cuckoo-tmp/
        - ./storage/:/cuckoo/storage/
      networks:
        - cuckoo
      env_file:
        - ./2.0/config-file.env

    api:
      depends_on:
        - postgres
      image: blacktop/cuckoo:2.0
      ports:
        - "8040:1337"
      links:
        - postgres
      command: api
      volumes:
        - ./cuckoo-tmp/:/tmp/cuckoo-tmp/
        - ./storage/:/cuckoo/storage/
      networks:
        - cuckoo
      env_file:
        - ./2.0/config-file.env

# nginx:
#   build: nginx/.
#   depends_on:
#     - mongo
#   ports:
#     - "8050:80"
#   links:
#     - mongo
#   networks:
#     - cuckoo

    mongo:
      image: mongo
      ports:
        - 27017
      volumes:
        - mongo-data:/data/db
      networks:
        - cuckoo

    elasticsearch:
      image: blacktop/elasticsearch:5.6
      ports:
        - 9200
      volumes:
        - es-data:/usr/share/elasticsearch/data
      networks:
        - cuckoo

    postgres:
      image: postgres
      ports:
        - 5432
      environment:
        - POSTGRES_USER: postgres
        - POSTGRES_PASSWORD: cuckoo
        - PGDATA: /var/lib/postgresql/data/pgdata
        # POSTGRES_INITDB_ARGS: --data-checksums
      volumes:
        - postgres-data:/var/lib/postgresql/data/pgdata
      networks:
        - cuckoo

    networks:
      cuckoo:
        driver: bridge

volumes:
cuckoo-data:
mongo-data:
es-data:
postgres-data:
